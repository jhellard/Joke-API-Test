{"version":3,"sources":["Buttons/Buttons.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","grabJokes","className","onClick","App","props","type","fetch","then","response","json","setState","joke","isPending","state","this","console","log","options","wrapperClassName","cursorClassName","strings","autoStart","setup","punchline","href","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sPAWeA,EATC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACjB,OACE,yBAAKC,UAAU,WACb,4BAAQC,QAAS,kBAAMF,EAAU,aAAjC,gBACA,4BAAQE,QAAS,kBAAMF,EAAU,iBAAjC,sBC2DSG,G,wDA3Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORJ,UAAY,SAACK,GACXC,MAAM,+CAAiDD,EAAO,WAC3DE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAI,EAAKE,SAAS,CAAEC,KAAMH,EAAS,GAAII,WAAW,QATlE,EAAKC,MAAQ,CACXF,KAAM,GACNC,WAAW,GAJI,E,qDAcT,IAAD,EACqBE,KAAKD,MAAzBF,EADD,EACCA,KAAMC,EADP,EACOA,UAGd,OAFAG,QAAQC,IAAIL,GAEL,yBAAKV,UAAU,WAElBW,EACE,oCACE,4BACE,kBAAC,IAAD,CACEK,QAAS,CACPC,iBAAkB,SAClBC,gBAAiB,eACjBC,QAAS,sBACTC,WAAW,MAIjB,kBAAC,EAAD,CAASrB,UAAWc,KAAKd,aACpBW,EAAKA,KAeR,oCACE,wBAAIV,UAAU,QAAQU,EAAKA,MAC3B,kBAAC,EAAD,CAASX,UAAWc,KAAKd,aAf3B,oCACE,wBAAIC,UAAU,QAAQU,EAAKW,OAC3B,kBAAC,IAAD,CACEL,QAAS,CACPC,iBAAkB,OAClBC,gBAAiB,eACjBC,QAAST,EAAKY,UACdF,WAAW,KAGf,kBAAC,EAAD,CAASrB,UAAWc,KAAKd,aASnC,uBAAGC,UAAU,UAAb,YAA+B,uBAAGuB,KAAK,+BAAR,wB,GAvDnBC,cCOZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT1B,MAAK,SAAA+B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3B,QACfsB,UAAUC,cAAcO,YAI1B5B,QAAQC,IACN,iHAKEkB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBvB,QAAQC,IAAI,sCAGRkB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAC,GACLhC,QAAQgC,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,iBAAwB1B,OAAOC,SAASL,MACpD+B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,iBAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtC5B,MAAM2B,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5BlD,MAAK,SAAAC,GAEJ,IAAMkD,EAAclD,EAASiD,QAAQE,IAAI,gBAEnB,MAApBnD,EAASoD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMvD,MAAK,SAAA+B,GACjCA,EAAayB,aAAaxD,MAAK,WAC7BqB,OAAOC,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1BY,OAAM,WACL/B,QAAQC,IACN,oEAvFAiD,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMvD,MAAK,WACjCQ,QAAQC,IACN,iHAMJgB,EAAgBC,EAAOC,OClC/BE,I","file":"static/js/main.bf19cb94.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Buttons = ({ grabJokes }) => {\r\n  return (\r\n    <div className='buttons'>\r\n      <button onClick={() => grabJokes('general')}>General Joke</button>\r\n      <button onClick={() => grabJokes('programming')}>Programming Joke</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Buttons;","import React, { Component } from 'react';\r\nimport Typewriter from 'typewriter-effect';\r\nimport Buttons from './Buttons/Buttons';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      joke: [],\r\n      isPending: true\r\n    };\r\n  }\r\n\r\n  grabJokes = (type) => {\r\n    fetch('https://official-joke-api.appspot.com/jokes/' + type + '/random')\r\n      .then(response => response.json())\r\n      .then(response => this.setState({ joke: response[0], isPending: false }))\r\n  }\r\n\r\n  render() {\r\n    const { joke, isPending } = this.state;\r\n    console.log(joke);\r\n\r\n    return <div className='wrapper'>\r\n      {\r\n        isPending ?\r\n          <>\r\n            <h1>\r\n              <Typewriter\r\n                options={{\r\n                  wrapperClassName: 'choose',\r\n                  cursorClassName: 'flicker span',\r\n                  strings: 'Choose your joke...',\r\n                  autoStart: true,\r\n                }}\r\n              />\r\n            </h1>\r\n            <Buttons grabJokes={this.grabJokes} />\r\n          </> : !joke.joke ?\r\n            (\r\n              <>\r\n                <h1 className='joke'>{joke.setup}</h1>\r\n                <Typewriter\r\n                  options={{\r\n                    wrapperClassName: 'span',\r\n                    cursorClassName: 'flicker span',\r\n                    strings: joke.punchline,\r\n                    autoStart: true,\r\n                  }}\r\n                />\r\n                <Buttons grabJokes={this.grabJokes} />\r\n              </>\r\n            ) : (\r\n              <>\r\n                <h1 className='joke'>{joke.joke}</h1>\r\n                <Buttons grabJokes={this.grabJokes} />\r\n              </>\r\n            )\r\n      }\r\n      <p className='footer'>Made by: <a href='https://github.com/JHellard'>Joshua Hellard</a></p>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}